// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`InfiniteList should render a default component 1`] = `
<InfiniteList
  dividerStyle="none"
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  isFinishedLoading={false}
  paddingStyle="none"
  role="none"
/>
`;

exports[`InfiniteList should render with initial children 1`] = `
<InfiniteList
  dividerStyle="none"
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  isFinishedLoading={true}
  paddingStyle="none"
  role="none"
>
  <ListItem
    hasChevron={false}
    isSelectable={false}
    isSelected={false}
    key="item-1"
  >
    <div
      className="item"
    >
      item 1
    </div>
  </ListItem>
  <ListItem
    hasChevron={false}
    isSelectable={false}
    isSelected={false}
    key="item-2"
  >
    <div
      className="item"
    >
      item 2
    </div>
  </ListItem>
  <ListItem
    hasChevron={false}
    isSelectable={false}
    isSelected={false}
    key="item-3"
  >
    <div
      className="item"
    >
      item 3
    </div>
  </ListItem>
  <ListItem
    hasChevron={false}
    isSelectable={false}
    isSelected={false}
    key="item-4"
  >
    <div
      className="item"
    >
      item 4
    </div>
  </ListItem>
</InfiniteList>
`;

exports[`InfiniteList should render with list having tabIndex as 0 1`] = `
<Fragment>
  <div
    className="infinite-list"
  >
    <div
      className="spacer"
      key="infinite-spacer-0"
      style={
        Object {
          "height": "0px",
        }
      }
    />
    <List
      dividerStyle="standard"
      paddingStyle="standard"
      role="listbox"
      tabIndex="0"
    >
      <ListItem
        className="item1"
        data-infinite-list-index={0}
        hasChevron={false}
        isSelectable={true}
        isSelected={false}
        key=".$item-1"
        refCallback={[Function]}
      >
        <div
          className="item"
        >
          item 1
        </div>
      </ListItem>
      <ListItem
        className="item2"
        data-infinite-list-index={1}
        hasChevron={false}
        isSelectable={true}
        isSelected={true}
        key=".$item-2"
        refCallback={[Function]}
      >
        <div
          className="item"
        >
          item 2
        </div>
      </ListItem>
      <ListItem
        className="item3"
        data-infinite-list-index={2}
        hasChevron={false}
        isSelectable={true}
        isSelected={false}
        key=".$item-3"
        refCallback={[Function]}
      >
        <div
          className="item"
        >
          item 3
        </div>
      </ListItem>
      <ListItem
        className="item4"
        data-infinite-list-index={3}
        hasChevron={false}
        isSelectable={true}
        isSelected={false}
        key=".$item-4"
        refCallback={[Function]}
      >
        <div
          className="item"
        >
          item 4
        </div>
      </ListItem>
    </List>
    <div
      className="spacer"
      key="infinite-spacer-1"
      style={
        Object {
          "height": "0px",
        }
      }
    />
  </div>
  <VisuallyHiddenText
    aria-atomic="true"
    aria-live="assertive"
    text=""
  />
</Fragment>
`;

exports[`InfiniteList should render with list props 1`] = `
<InfiniteList
  dividerStyle="standard"
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  isFinishedLoading={true}
  paddingStyle="standard"
  progressiveLoadingMessage="Loading allergies..."
  role="listbox"
>
  <ListItem
    hasChevron={false}
    isSelectable={true}
    isSelected={false}
    key="item-1"
  >
    <div
      className="item"
    >
      item 1
    </div>
  </ListItem>
  <ListItem
    hasChevron={false}
    isSelectable={true}
    isSelected={true}
    key="item-2"
  >
    <div
      className="item"
    >
      item 2
    </div>
  </ListItem>
  <ListItem
    hasChevron={false}
    isSelectable={true}
    isSelected={false}
    key="item-3"
  >
    <div
      className="item"
    >
      item 3
    </div>
  </ListItem>
  <ListItem
    hasChevron={false}
    isSelectable={true}
    isSelected={false}
    key="item-4"
  >
    <div
      className="item"
    >
      item 4
    </div>
  </ListItem>
</InfiniteList>
`;

exports[`InfiniteList should render with list with style props 1`] = `
<InfiniteList
  dividerStyle="standard"
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  isFinishedLoading={true}
  paddingStyle="standard"
  role="listbox"
>
  <ListItem
    className="item1"
    hasChevron={false}
    isSelectable={true}
    isSelected={false}
    key="item-1"
  >
    <div
      className="item"
    >
      item 1
    </div>
  </ListItem>
  <ListItem
    className="item2"
    hasChevron={false}
    isSelectable={true}
    isSelected={true}
    key="item-2"
  >
    <div
      className="item"
    >
      item 2
    </div>
  </ListItem>
  <ListItem
    className="item3"
    hasChevron={false}
    isSelectable={true}
    isSelected={false}
    key="item-3"
  >
    <div
      className="item"
    >
      item 3
    </div>
  </ListItem>
  <ListItem
    className="item4"
    hasChevron={false}
    isSelectable={true}
    isSelected={false}
    key="item-4"
  >
    <div
      className="item"
    >
      item 4
    </div>
  </ListItem>
</InfiniteList>
`;

exports[`InfiniteList should render with no children and loading 1`] = `
<InfiniteList
  dividerStyle="none"
  initialLoadingIndicator={
    <div
      className="initialLoadingIndicator"
    />
  }
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  isFinishedLoading={false}
  paddingStyle="none"
  progressiveLoadingIndicator={
    <div
      className="progressiveLoadingIndicator"
    />
  }
  role="none"
/>
`;
