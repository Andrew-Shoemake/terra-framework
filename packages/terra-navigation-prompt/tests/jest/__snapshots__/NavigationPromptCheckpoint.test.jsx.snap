// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NavigationPrompt Snapshots should render the NotificationDialog when state is present 1`] = `
<ContextProvider
  value={
    Object {
      "registerPrompt": [Function],
      "unregisterPrompt": [Function],
    }
  }
>
  <NotificationDialog
    acceptAction={
      Object {
        "onClick": [Function],
        "text": "Accept",
      }
    }
    buttonOrder="acceptFirst"
    custom={Object {}}
    dialogTitle="Test Title"
    emphasizedAction="none"
    isOpen={true}
    rejectAction={
      Object {
        "onClick": [Function],
        "text": "Reject",
      }
    }
    startMessage="Test Message"
    variant="hazard-medium"
  />
</ContextProvider>
`;

exports[`NavigationPrompt Snapshots should render the NotificationDialog with accept as the primary action 1`] = `
<ContextProvider
  value={
    Object {
      "registerPrompt": [Function],
      "unregisterPrompt": [Function],
    }
  }
>
  <NotificationDialog
    acceptAction={
      Object {
        "onClick": [Function],
        "text": "Accept",
      }
    }
    buttonOrder="acceptFirst"
    custom={Object {}}
    dialogTitle="Test Title"
    emphasizedAction="accept"
    isOpen={true}
    rejectAction={
      Object {
        "onClick": [Function],
        "text": "Reject",
      }
    }
    startMessage="Test Message"
    variant="hazard-medium"
  />
</ContextProvider>
`;

exports[`NavigationPrompt Snapshots should render the NotificationDialog with reject as the primary action 1`] = `
<ContextProvider
  value={
    Object {
      "registerPrompt": [Function],
      "unregisterPrompt": [Function],
    }
  }
>
  <NotificationDialog
    acceptAction={
      Object {
        "onClick": [Function],
        "text": "Accept",
      }
    }
    buttonOrder="rejectFirst"
    custom={Object {}}
    dialogTitle="Test Title"
    emphasizedAction="reject"
    isOpen={true}
    rejectAction={
      Object {
        "onClick": [Function],
        "text": "Reject",
      }
    }
    startMessage="Test Message"
    variant="hazard-medium"
  />
</ContextProvider>
`;

exports[`NavigationPrompt Snapshots should render with children 1`] = `
<ContextProvider
  value={
    Object {
      "registerPrompt": [Function],
      "unregisterPrompt": [Function],
    }
  }
>
  <withPromptRegistration(MockPromptBase) />
</ContextProvider>
`;

exports[`NavigationPrompt Snapshots should render with minimal props 1`] = `
<ContextProvider
  value={
    Object {
      "registerPrompt": [Function],
      "unregisterPrompt": [Function],
    }
  }
/>
`;
